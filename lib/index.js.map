{"version":3,"sources":["index.js"],"names":["parse","stringify","parseDefaults","voidTags","closingTags","childlessTags","closingTagAncestorBreakers","str","options","elementCallback","tokens","ast"],"mappings":";;;;;;QAkBgBA,K,GAAAA,K;QAMAC,S,GAAAA,S;;AAxBhB;;;;AACA;;;;AAEA;;AACA;;;;AAFA;AASO,IAAMC,wCAAgB;AAC3BC,0BAD2B;AAE3BC,gCAF2B;AAG3BC,oCAH2B;AAI3BC;AAJ2B,CAAtB;;AAOA,SAASN,KAAT,CAAgBO,GAAhB,EAAsE;AAAA,MAAjDC,OAAiD,uEAAvCN,aAAuC;AAAA,MAAxBO,eAAwB,uEAAN,IAAM;;AAC3E,MAAMC,SAAS,qBAAMH,GAAN,EAAWC,OAAX,CAAf;AACA,SAAO,sBAAOE,MAAP,EAAeF,OAAf,EAAwBC,eAAxB,CAAP;AACA;AACD;;AAEM,SAASR,SAAT,CAAoBU,GAApB,EAA0E;AAAA,MAAjDH,OAAiD,uEAAvCN,aAAuC;AAAA,MAAxBO,eAAwB,uEAAN,IAAM;;AAC/E,SAAO,uBAAOE,GAAP,EAAYH,OAAZ,EAAqBC,eAArB,CAAP;AACD","file":"index.js","sourcesContent":["import lexer from './lexer'\nimport parser from './parser'\n// import {format} from './format'\nimport {toHTML} from './stringify'\nimport {\n  voidTags,\n  closingTags,\n  childlessTags,\n  closingTagAncestorBreakers\n} from './tags'\n\nexport const parseDefaults = {\n  voidTags,\n  closingTags,\n  childlessTags,\n  closingTagAncestorBreakers\n}\n\nexport function parse (str, options = parseDefaults, elementCallback = null) {\n  const tokens = lexer(str, options)\n  return parser(tokens, options, elementCallback)\n  // return format(nodes, options)\n}\n\nexport function stringify (ast, options = parseDefaults, elementCallback = null) {\n  return toHTML(ast, options, elementCallback)\n}\n"]}