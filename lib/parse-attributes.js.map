{"version":3,"sources":["parse-attributes.js"],"names":["str","attParts","split","attSpaces","match","attrs","openAttr","forEach","item","index","space","open","close","test","attMatches","quotes","reg","replace","withoutQuotes","ret","pairedAttributes","Object","entries","key","value"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAOe,UAAUA,GAAV,EAAe;AAC5B,MAAIC,WAAWD,IAAIE,KAAJ,CAAU,KAAV,CAAf;AACA,MAAIC,YAAYH,IAAII,KAAJ,CAAU,OAAV,CAAhB;AACA,MAAIC,QAAQ,EAAZ;AACA,MAAIC,iBAAJ;;AAEAL,WAASM,OAAT,CAAiB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AACtC,QAAI,CAACD,IAAL,EAAW;AACX,QAAIF,QAAJ,EAAc;AACZ,UAAII,QAAQP,UAAUM,QAAQ,CAAlB,CAAZ;AACAD,aAAOF,SAASK,IAAT,GAAgBD,KAAhB,GAAwBF,IAA/B;AACA,UAAIF,SAASM,KAAT,CAAeC,IAAf,CAAoBL,IAApB,CAAJ,EAA+B;AAC7BF,mBAAW,IAAX;AACA,YAAIQ,aAAaN,KAAKJ,KAAL,CAAW,kCAAX,CAAjB;AACAC,cAAMS,WAAW,CAAX,CAAN,IAAuBA,WAAW,CAAX,CAAvB;AACA,eAAOT,MAAMS,WAAW,CAAX,CAAN,CAAP;AACD,OALD,MAKO;AACLR,iBAASK,IAAT,GAAgBH,IAAhB;AACA,eAAOF,SAASK,IAAhB;AACD;AACF;;AAED,QAAII,SAASP,KAAKJ,KAAL,CAAW,8BAAX,CAAb;AACA,QAAIW,MAAJ,EAAY;AACV,UAAIC,YAAJ;AACA,cAAQD,OAAO,CAAP,CAAR;AACE,aAAK,GAAL;AACEC,gBAAM,IAAN;AACA;AACF,aAAK,IAAL;AACEA,gBAAM,IAAN;AACA;AANJ;AAQA,UAAIA,IAAIH,IAAJ,CAASL,IAAT,KAAkB,CAAC,mBAAmBK,IAAnB,CAAwBL,IAAxB,CAAvB,EAAsD;AACpDH,cAAMU,OAAO,CAAP,CAAN,IAAmBA,OAAO,CAAP,EAAUE,OAAV,CAAkBD,GAAlB,EAAuB,EAAvB,CAAnB;AACA,eAAOX,MAAMU,OAAO,CAAP,CAAN,CAAP;AACD,OAHD,MAGO;AACLT,mBAAW;AACTK,gBAAMH,IADG;AAETI,iBAAOI;AAFE,SAAX;AAIA,eAAOV,QAAP;AACD;AACF;AACD,QAAIY,gBAAgBV,KAAKJ,KAAL,CAAW,0BAAX,CAApB;AACA,QAAIc,aAAJ,EAAmB;AACjBb,YAAMa,cAAc,CAAd,CAAN,IAA0BA,cAAc,CAAd,KAAoB,EAA9C;AACA,aAAOb,MAAMa,cAAc,CAAd,CAAN,CAAP;AACD;AACD;AACA,QAAIC,MAAMd,MAAMG,KAAKN,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAN,IAA4B,IAAtC;AACA,WAAOiB,GAAP;AACD,GA9CD;AA+CA,MAAIb,QAAJ,EAAc,CAEb;AADC;;;AAGF;AACA,MAAIc,mBAAmB,EAAvB;;AA1D4B;AAAA;AAAA;;AAAA;AA4D5B,yBAA2BC,OAAOC,OAAP,CAAejB,KAAf,CAA3B,8HAAkD;AAAA;AAAA,UAAtCkB,GAAsC;AAAA,UAAjCC,KAAiC;;AAChD;AACAJ,yBAAmB;AACjBG,aAAKA,GADY;AAEjBC,eAAOA;AAFU,OAAnB;AAID;AAlE2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoE5B,SAAOJ,gBAAP;AACD,C","file":"parse-attributes.js","sourcesContent":["/**\n * This is a heavilt modified version of:\n * https://github.com/switer/attribute-parser\n *\n * @param str\n * @returns {Array}\n */\nexport default function (str) {\n  let attParts = str.split(/\\s+/)\n  let attSpaces = str.match(/\\s+/gm)\n  let attrs = {}\n  let openAttr\n\n  attParts.forEach(function (item, index) {\n    if (!item) return\n    if (openAttr) {\n      let space = attSpaces[index - 1]\n      item = openAttr.open + space + item\n      if (openAttr.close.test(item)) {\n        openAttr = null\n        let attMatches = item.match(/^([^\\s=]*?)=['\"]([\\s\\S]*?)['\"]$/m)\n        attrs[attMatches[1]] = attMatches[2]\n        return attrs[attMatches[1]]\n      } else {\n        openAttr.open = item\n        return openAttr.open\n      }\n    }\n\n    let quotes = item.match(/^([^\\s=]*?)=('|\")([\\s\\S]*)$/m)\n    if (quotes) {\n      let reg\n      switch (quotes[2]) {\n        case '\"':\n          reg = /\"$/\n          break\n        case '\\'':\n          reg = /'$/\n          break\n      }\n      if (reg.test(item) && !/^[^\\s=]*?=['\"]$/m.test(item)) {\n        attrs[quotes[1]] = quotes[3].replace(reg, '')\n        return attrs[quotes[1]]\n      } else {\n        openAttr = {\n          open: item,\n          close: reg\n        }\n        return openAttr\n      }\n    }\n    let withoutQuotes = item.match(/^([^\\s=]*?)=([\\s\\S]*?)$/m)\n    if (withoutQuotes) {\n      attrs[withoutQuotes[1]] = withoutQuotes[2] || ''\n      return attrs[withoutQuotes[1]]\n    }\n    // key only attribute\n    let ret = attrs[item.split('=')[0]] = null\n    return ret\n  })\n  if (openAttr) {\n    // console.warn(`Unclosed attribute: ${openAttr.open}`)\n  }\n\n  // Now split into key/value pairs.\n  let pairedAttributes = []\n\n  for (const [key, value] of Object.entries(attrs)) {\n    // Repeatdly overwrite the same object as we're only expecting one result.\n    pairedAttributes = {\n      key: key,\n      value: value\n    }\n  }\n\n  return pairedAttributes\n}\n"]}